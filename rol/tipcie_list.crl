#
#  User example readout list using a TIpcie
#
#    Bryan Moffit, TJNAF 2015
#

readout list GEN_USER
maximum 1024,512
polling
general readout

# TRIG_MODE = TIP_READOUT_EXT_POLL for polling mode (External input)
#           = TIP_READOUT_TS_POLL  for polling mode (TS input)
const TRIG_MODE = TIP_READOUT_EXT_POLL
const FIBER_LATENCY_OFFSET = 0x4A  /* measured longest fiber length */

  
extern int bigendian_out;
int blockLevel=1;
unsigned int *tiData=NULL;

############################################################
# DOWNLOAD
############################################################
begin download

# Sending little-endian (Linux-ROC) to little-endian (Linux-EB)
bigendian_out = 1;

# Setup TIpcie
%%
{
  tipSetFiberLatencyOffset_preInit(FIBER_LATENCY_OFFSET);

  tipInit(TRIG_MODE,0);

  if(TRIG_MODE == TIP_READOUT_EXT_POLL)
    {
      tipSetBlockLimit(0);

      tipLoadTriggerTable(0);

      tipSetTriggerHoldoff(1,4,0);
      tipSetTriggerHoldoff(2,4,0);

      tipSetPrescale(0);
      tipSetBlockLevel(blockLevel);

      tipSetTriggerSource(TIP_TRIGGER_PULSER);

      tipSetBusySource(TIP_BUSY_LOOPBACK ,1);

      tipSetBlockBufferLevel(10);

      tipSetSyncEventInterval(0);

      tipAddSlave(1);

    }

  tipStatus(1);
}
%%
  log inform "User Download Executed"

end download

############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart"

  init trig source GEN
  link sync trig source GEN 1 to titrig and titrig_done
  event type 1 then read GEN 1

  log inform "User Prestart Executed"

%%
{

  tipStatus(1);

  if(TRIG_MODE == TIP_READOUT_EXT_POLL)
    {
      tipTrigLinkReset();
      usleep(10000);
      tipSyncReset(1);
    }

}
%%

end prestart

############################################################
# GO
############################################################
begin go

  log inform "Entering User Go"

%%
{
  tipStatus(1);
  tipSetRandomTrigger(1,0x7);
  CDOENABLE(GEN,1,0);

  blockLevel = tipGetCurrentBlockLevel();
  printf("%s: Current Block Level = %d\n",
	 __FUNCTION__, blockLevel);

  /* Allocate some memory for TI data */
  tiData = (unsigned int*)malloc((8+5*blockLevel)*sizeof(unsigned int));
}
%%

  log inform "User Go Executed"

end go


############################################################
# END
############################################################
begin end

%%
  CDODISABLE(GEN,1,0);
  tipStatus(1);
  tipDisableRandomTrigger();

/* Free up the allocated memory for the tiData */
  if(tiData!=NULL)
    {
      free(tiData);
      tiData=NULL;
    }
%%

  log inform "User End Executed"

end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "User Pause Executed"

end pause

############################################################
# TRIGGER
############################################################
begin trigger titrig

  variable ii, event_ty, event_no, dCnt

 event_no = *rol->nevents;

 rol->dabufp = (long *) 0;

%%
 {
   dCnt = tipReadBlock(tiData,8+5*blockLevel,0);
   if(dCnt<=0)
     {
       printf("**************************************************\n");
       printf("%6d: No TI data or error.  dCnt = %d\n",event_no,dCnt);
       printf("**************************************************\n");
       tipSetBlockLimit(1);
     }
   else
     {
       event_ty = tipDecodeTriggerType(tiData, dCnt, 1);
       if(event_ty <= 0)
	 {
	   /* Could not find trigger type */
	   event_ty = 1;
	 }

       /* CODA 2.x only allows for 4 bits of trigger type */
       event_ty &= 0xF;

     }
 }
%%

 open event type event_ty of BT_UI4
%%
{
  if(dCnt<=0)
    {
      printf("No data or error.  dCnt = %d\n",dCnt);
    }
  else
    {
      for(ii=0; ii<dCnt; ii++)
	*rol->dabufp++ = tiData[ii];
    }
}
%%

 close event

end trigger

begin done titrig

end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  CDOACK(GEN,1,0);
end done

begin status

end status
